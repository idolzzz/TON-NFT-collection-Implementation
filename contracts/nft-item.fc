#include "imports/stdlib.fc";

int workchain() asm "0 PUSHINT";

() store_data(int index, slice collection_address, slice owner_address, cell content) impure {
    set_data(
        begin_cell()
            .store_uint(index, 64)
            .store_slice(collection_address)
            .store_slice(owner_address)
            .store_ref(content)
            .end_cell()
    );
}

(int, int, slice, slice, cell) load_data() {
    slice ds = get_data().begin_parse();
    var(index, collection_address) = (ds~load_uint(64), ds~load_msg_addr());
    if (ds.slice_bits() > 0) {
        return(-1, index, collection_address, ds~load_msg_addr(), ds~load_ref());
    } else {
        return(0, collection_address, null(), null());
    }
}

() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
    var msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(to_address)
        .store_coins(amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op, 32)
        .store_uint(query_id, 64);

    if (~ builder_null?(payload)) {
        msg = msg.store_builder(payload);
    }

    send_raw_message(msg.end_cell(), send_mode);

}

() transfer_ownership(
    int my_balance,
    int index,
    slice collection_address, 
    slice owner_address,
    cell content,
    slice sender_address,
    int query_id, 
    slice in_msg_body,
    int fwd_fees
) impure inline {
    throw_unless(401, equal_slices(sender_address, owner_address));

    slice new_owner_address = in_msg_body~load_msg_addr();
    force_chain(new_owner_address);
    slice responce_destination = in_msg_body~load_msg_addr();
    
    in_msg_body~load_int(1);
    int forward_amount = in_msg_body~load_coins();

    int rest_amount = my_balance - min_tons_for_storage();
    if (forward_amount) {
        rest_amount -= (forward_amount + fwd_fees);
    }

    int need_reponce = responce_destination.preload_uint(2) != 0;
    if (need_reponce) {
        rest_amount -= fwd_fees;
    }

    if (need_responce) {
        force_chain(responce_destination);
        send_msg(responce_destination,rest_amount,op::ownership_assigned(),query_id,payload,send_mode);
    }
}

() force_chain(slice addr) impure {
    (int wc, _) = parse_std_addr(addr);
    throw_unless(333, wc == workchain());
} 
